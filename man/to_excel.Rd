% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_excel.R
\name{to_excel}
\alias{to_excel}
\title{Pass data to a excel workbook}
\usage{
to_excel(df, wb, title = " ", sheet = "tables", format = !is.null(title),
  append = TRUE, row = 1L, col = 1L)
}
\arguments{
\item{df}{A \code{data.frame}.}

\item{wb}{A \code{Workbook}.}

\item{title}{The title to give to the table. Must be \code{NULL} if you do not
want the table to be styled.}

\item{sheet}{Name of the sheet to use when writing the data.}

\item{format}{Format values and apply the default template to the table output.}

\item{append}{Whether or not the function should append or clean the
sheet of existing data before writing.}

\item{row}{Specify the startingrow when writing data to a new sheet.}

\item{col}{Start column. Same as for row.}
}
\description{
This function passes a \code{data.frame} to a openxlsx workbook.
}
\note{
This function requires \code{openxlsx}.
}
\examples{
if (require(openxlsx)) {
 wb <- openxlsx::createWorkbook()
 df <- data.frame("String" = c("A", "B"), "Int" = c(1:2L), "Percent" = c(0.5, 0.75))

 # The workbook is mutable, so we don't have to assign result.
 to_excel(df, wb, title = "Example data", sheet = "Example", append = FALSE)

 # Data is first argument, so we can use it with dplyr.
 # df \%>\% to_excel(wb, title = "Example dplyr", sheet = "Example", append = TRUE)

 # Save the data
 write_data(wb, "Example tables.xlsx", overwrite = TRUE)
}
}
\author{
Kristian D. Olsen
}

